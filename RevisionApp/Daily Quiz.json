
{
    "name": "Daily Quiz",
    "questions": [
        {
            "questionText": "What is the purpose of the @IBOutlet keyword in Swift?",
            "possibleAnswers": [
                { "optionText": "To connect UI elements in Interface Builder to your code as variables", "isAnswer": true },
                { "optionText": "To connect UI elements to read-only properties", "isAnswer": false },
                { "optionText": "To define variables that automatically update UI elements", "isAnswer": false },
                { "optionText": "To link actions to UI elements in Interface Builder", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is ARC (Automatic Reference Counting) in iOS?",
            "possibleAnswers": [
                { "optionText": "A system that automatically manages memory by counting strong references", "isAnswer": true },
                { "optionText": "A technique requiring manual memory management by developers", "isAnswer": false },
                { "optionText": "A mechanism preventing memory leaks by deallocating unreferenced objects", "isAnswer": false },
                { "optionText": "A way to manage memory by tracking strong and weak references", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of a storyboard in iOS development?",
            "possibleAnswers": [
                { "optionText": "To design the app's UI layout and manage view transitions", "isAnswer": true },
                { "optionText": "To define data flow between view controllers", "isAnswer": false },
                { "optionText": "To manage the interaction between app logic and UI components", "isAnswer": false },
                { "optionText": "To create and manage UI elements programmatically", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between @objc and @objcMembers in Swift?",
            "possibleAnswers": [
                { "optionText": "@objc exposes a single method; @objcMembers exposes all class methods", "isAnswer": true },
                { "optionText": "@objc is for classes and structs; @objcMembers is for classes only", "isAnswer": false },
                { "optionText": "@objc makes a class Objective-C compatible; @objcMembers is for individual methods", "isAnswer": false },
                { "optionText": "@objc exposes instance methods; @objcMembers exposes class methods", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of a DispatchQueue in iOS?",
            "possibleAnswers": [
                { "optionText": "To manage task execution asynchronously or synchronously on different threads", "isAnswer": true },
                { "optionText": "To ensure all tasks run on the main thread", "isAnswer": false },
                { "optionText": "To execute tasks in sequence, ensuring thread safety", "isAnswer": false },
                { "optionText": "To manage memory allocation for background tasks", "isAnswer": false }
            ]
        },
        {
            "questionText": "What does the @Published property wrapper do in Swift?",
            "possibleAnswers": [
                { "optionText": "Notifies observers of changes, triggering UI updates in SwiftUI", "isAnswer": true },
                { "optionText": "Caches the property's value, preventing changes", "isAnswer": false },
                { "optionText": "Marks a property as optional, allowing nil values", "isAnswer": false },
                { "optionText": "Synchronizes the property across instances of the class", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of the @main attribute in Swift?",
            "possibleAnswers": [
                { "optionText": "Indicates the entry point of a Swift application", "isAnswer": true },
                { "optionText": "Marks the main thread for thread-safe operations in SwiftUI", "isAnswer": false },
                { "optionText": "Ensures a class or struct is initialized once", "isAnswer": false },
                { "optionText": "Defines the main view controller for UI interactions", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is Combine used for in iOS development?",
            "possibleAnswers": [
                { "optionText": "To handle asynchronous events and data streams using a declarative Swift API", "isAnswer": true },
                { "optionText": "To merge multiple data sources for UI updates", "isAnswer": false },
                { "optionText": "To combine multiple view controllers into a single interface", "isAnswer": false },
                { "optionText": "To manage Core Data relationships and updates", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between weak and unowned references in Swift?",
            "possibleAnswers": [
                { "optionText": "Weak references can become nil; unowned references cannot", "isAnswer": true },
                { "optionText": "Unowned references convert to weak if they can be nil", "isAnswer": false },
                { "optionText": "Weak references are used for value types; unowned for reference types", "isAnswer": false },
                { "optionText": "Weak references increase reference count; unowned do not", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the role of AppDelegate in an iOS application?",
            "possibleAnswers": [
                { "optionText": "To handle application lifecycle events and push notifications", "isAnswer": true },
                { "optionText": "To manage the app's memory and resources", "isAnswer": false },
                { "optionText": "To serve as the main entry point for creating views", "isAnswer": false },
                { "optionText": "To manage the navigation stack and view controller transitions", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between a struct and a class in Swift?",
            "possibleAnswers": [
                { "optionText": "Structs are value types; classes are reference types", "isAnswer": true },
                { "optionText": "Structs are for small data; classes for complex data", "isAnswer": false },
                { "optionText": "Structs are immutable by default; classes are mutable", "isAnswer": false },
                { "optionText": "There is no significant difference; both are interchangeable", "isAnswer": false }
            ]
        },
        {
            "questionText": "When would you use a struct over a class in Swift?",
            "possibleAnswers": [
                { "optionText": "Use structs for simple, immutable data models; use classes for inheritance", "isAnswer": true },
                { "optionText": "Always use structs for better memory efficiency", "isAnswer": false },
                { "optionText": "Always use classes for more flexible inheritance", "isAnswer": false },
                { "optionText": "Use structs for any data model; they are faster", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between synchronous and asynchronous tasks?",
            "possibleAnswers": [
                { "optionText": "Synchronous tasks block the current thread; asynchronous tasks allow it to continue", "isAnswer": true },
                { "optionText": "Asynchronous tasks are always faster than synchronous tasks", "isAnswer": false },
                { "optionText": "Synchronous tasks must run on the main thread", "isAnswer": false },
                { "optionText": "There is no difference; both are handled the same", "isAnswer": false }
            ]
        },
        {
            "questionText": "What are optionals in Swift?",
            "possibleAnswers": [
                { "optionText": "A type that can hold either a value or nil", "isAnswer": true },
                { "optionText": "A type that must always have a value", "isAnswer": false },
                { "optionText": "A type used only for error handling in Swift", "isAnswer": false },
                { "optionText": "A function that returns a value or nil", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of a guard statement in Swift?",
            "possibleAnswers": [
                { "optionText": "To check conditions and exit early if they aren't met", "isAnswer": true },
                { "optionText": "To break out of a loop when a condition is met", "isAnswer": false },
                { "optionText": "To declare variables that must be initialized before exiting", "isAnswer": false },
                { "optionText": "To create loops that run while a condition is true", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is GCD (Grand Central Dispatch) used for in iOS?",
            "possibleAnswers": [
                { "optionText": "For managing tasks in a multi-threaded environment", "isAnswer": true },
                { "optionText": "For handling database queries across threads", "isAnswer": false },
                { "optionText": "For creating and managing user interfaces across threads", "isAnswer": false },
                { "optionText": "For handling image processing and compute-intensive tasks", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a completion handler?",
            "possibleAnswers": [
                { "optionText": "A closure called when an asynchronous task completes", "isAnswer": true },
                { "optionText": "A function called when a loop completes its execution", "isAnswer": false },
                { "optionText": "A closure that handles errors within a function", "isAnswer": false },
                { "optionText": "A tool to manage and synchronize multiple threads", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a closure in Swift?",
            "possibleAnswers": [
                { "optionText": "A self-contained block of code that can be passed around and used", "isAnswer": true },
                { "optionText": "A function without a name that is executed immediately", "isAnswer": false },
                { "optionText": "A method used for error handling in Swift applications", "isAnswer": false },
                { "optionText": "A special data structure for managing memory in Swift", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a delegate in iOS development?",
            "possibleAnswers": [
                { "optionText": "A design pattern allowing communication between objects via a protocol", "isAnswer": true },
                { "optionText": "A class defining a blueprint of methods for another class", "isAnswer": false },
                { "optionText": "A tool for managing multithreading within an application", "isAnswer": false },
                { "optionText": "A UIView subclass handling user input and gestures", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between weak and strong references?",
            "possibleAnswers": [
                { "optionText": "Strong references increase reference count; weak references do not", "isAnswer": true },
                { "optionText": "Weak references are faster and more memory-efficient", "isAnswer": false },
                { "optionText": "Strong references are used within closures only", "isAnswer": false },
                { "optionText": "No significant difference; both serve the same purpose", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between a struct and a class in Swift?",
            "possibleAnswers": [
                { "optionText": "Structs are value types; classes are reference types", "isAnswer": true },
                { "optionText": "Structs are for small data; classes for complex data", "isAnswer": false },
                { "optionText": "Structs are immutable by default; classes are mutable", "isAnswer": false },
                { "optionText": "There is no significant difference; both are interchangeable", "isAnswer": false }
            ]
        },
        {
            "questionText": "When would you use a struct over a class in Swift?",
            "possibleAnswers": [
                { "optionText": "Use structs for simple, immutable data models; use classes for inheritance", "isAnswer": true },
                { "optionText": "Always use structs for better memory efficiency", "isAnswer": false },
                { "optionText": "Always use classes for more flexible inheritance", "isAnswer": false },
                { "optionText": "Use structs for any data model; they are faster", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between synchronous and asynchronous tasks?",
            "possibleAnswers": [
                { "optionText": "Synchronous tasks block the current thread; asynchronous tasks allow it to continue", "isAnswer": true },
                { "optionText": "Asynchronous tasks are always faster than synchronous tasks", "isAnswer": false },
                { "optionText": "Synchronous tasks must run on the main thread", "isAnswer": false },
                { "optionText": "There is no difference; both are handled the same", "isAnswer": false }
            ]
        },
        {
            "questionText": "What are optionals in Swift?",
            "possibleAnswers": [
                { "optionText": "A type that can hold either a value or nil", "isAnswer": true },
                { "optionText": "A type that must always have a value", "isAnswer": false },
                { "optionText": "A type used only for error handling in Swift", "isAnswer": false },
                { "optionText": "A function that returns a value or nil", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of a guard statement in Swift?",
            "possibleAnswers": [
                { "optionText": "To check conditions and exit early if they aren't met", "isAnswer": true },
                { "optionText": "To break out of a loop when a condition is met", "isAnswer": false },
                { "optionText": "To declare variables that must be initialized before exiting", "isAnswer": false },
                { "optionText": "To create loops that run while a condition is true", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is GCD (Grand Central Dispatch) used for in iOS?",
            "possibleAnswers": [
                { "optionText": "For managing tasks in a multi-threaded environment", "isAnswer": true },
                { "optionText": "For handling database queries across threads", "isAnswer": false },
                { "optionText": "For creating and managing user interfaces across threads", "isAnswer": false },
                { "optionText": "For handling image processing and compute-intensive tasks", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a completion handler?",
            "possibleAnswers": [
                { "optionText": "A closure called when an asynchronous task completes", "isAnswer": true },
                { "optionText": "A function called when a loop completes its execution", "isAnswer": false },
                { "optionText": "A closure that handles errors within a function", "isAnswer": false },
                { "optionText": "A tool to manage and synchronize multiple threads", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a closure in Swift?",
            "possibleAnswers": [
                { "optionText": "A self-contained block of code that can be passed around and used", "isAnswer": true },
                { "optionText": "A function without a name that is executed immediately", "isAnswer": false },
                { "optionText": "A method used for error handling in Swift applications", "isAnswer": false },
                { "optionText": "A special data structure for managing memory in Swift", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a delegate in iOS development?",
            "possibleAnswers": [
                { "optionText": "A design pattern allowing communication between objects via a protocol", "isAnswer": true },
                { "optionText": "A class defining a blueprint of methods for another class", "isAnswer": false },
                { "optionText": "A tool for managing multithreading within an application", "isAnswer": false },
                { "optionText": "A UIView subclass handling user input and gestures", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between weak and strong references?",
            "possibleAnswers": [
                { "optionText": "Strong references increase reference count; weak references do not", "isAnswer": true },
                { "optionText": "Weak references are faster and more memory-efficient", "isAnswer": false },
                { "optionText": "Strong references are used within closures only", "isAnswer": false },
                { "optionText": "No significant difference; both serve the same purpose", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of the @escaping keyword in Swift?",
            "possibleAnswers": [
                { "optionText": "To indicate that a closure may outlive the function’s execution", "isAnswer": true },
                { "optionText": "To mark closures that prevent memory leaks by deallocating after use", "isAnswer": false },
                { "optionText": "To enhance closure performance by optimizing execution", "isAnswer": false },
                { "optionText": "To use a closure in multiple threads simultaneously", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a protocol in Swift?",
            "possibleAnswers": [
                { "optionText": "A blueprint of methods and properties that a class, struct, or enum can adopt", "isAnswer": true },
                { "optionText": "A loop used to iterate over collections and perform operations", "isAnswer": false },
                { "optionText": "A data structure for managing collections of objects", "isAnswer": false },
                { "optionText": "A method for handling errors and ensuring safe code execution", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is Core Data used for?",
            "possibleAnswers": [
                { "optionText": "For managing object graphs and persistent storage", "isAnswer": true },
                { "optionText": "For creating animations and handling UI rendering", "isAnswer": false },
                { "optionText": "For managing network requests and secure data storage", "isAnswer": false },
                { "optionText": "For organizing views and layout hierarchies in iOS", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between frame and bounds in iOS?",
            "possibleAnswers": [
                { "optionText": "Frame is a view's size and position in its superview; bounds is in its own coordinate system", "isAnswer": true },
                { "optionText": "Bounds define animations; frame is for layout positioning", "isAnswer": false },
                { "optionText": "Frame is used for drawing; bounds is for positioning on screen", "isAnswer": false },
                { "optionText": "No difference; frame and bounds are interchangeable", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of the 'lazy' keyword in Swift?",
            "possibleAnswers": [
                { "optionText": "To delay property initialization until it is first accessed", "isAnswer": true },
                { "optionText": "To preload data into memory before it is needed", "isAnswer": false },
                { "optionText": "To automatically deallocate unused properties after time", "isAnswer": false },
                { "optionText": "To create static variables shared across class instances", "isAnswer": false }
            ]
        },
        {
            "questionText": "How does memory management work in iOS?",
            "possibleAnswers": [
                { "optionText": "iOS uses ARC to manage memory by tracking and releasing unused objects", "isAnswer": true },
                { "optionText": "Developers must manually allocate and free memory for objects", "isAnswer": false },
                { "optionText": "Memory is managed by the operating system without developer intervention", "isAnswer": false },
                { "optionText": "Memory management isn't a concern in iOS; modern devices handle it", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is SwiftUI?",
            "possibleAnswers": [
                { "optionText": "A framework for building user interfaces across all Apple platforms using a declarative Swift syntax", "isAnswer": true },
                { "optionText": "A new programming language developed by Apple as a replacement for Objective-C", "isAnswer": false },
                { "optionText": "A tool for managing databases and persistent storage in iOS applications", "isAnswer": false },
                { "optionText": "A type of data structure used for organizing complex data models in iOS applications", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a property wrapper in Swift?",
            "possibleAnswers": [
                { "optionText": "A custom attribute that can add behavior to properties while keeping the declaration clean", "isAnswer": true },
                { "optionText": "A tool for creating loops and iterating over collections in Swift", "isAnswer": false },
                { "optionText": "A method for error handling that wraps properties for safe execution", "isAnswer": false },
                { "optionText": "A design pattern used for delegation and communication between objects", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of the @State keyword in SwiftUI?",
            "possibleAnswers": [
                { "optionText": "To create mutable state tied to the view lifecycle, ensuring UI updates", "isAnswer": true },
                { "optionText": "To create a constant value shared across views within a SwiftUI application", "isAnswer": false },
                { "optionText": "To handle network requests and manage data fetching within a view", "isAnswer": false },
                { "optionText": "To define view hierarchies and manage UI layout", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between @State and @Binding in SwiftUI?",
            "possibleAnswers": [
                { "optionText": "@State manages local state; @Binding passes a reference for two-way binding", "isAnswer": true },
                { "optionText": "@State is for local variables; @Binding is for global constants", "isAnswer": false },
                { "optionText": "@Binding is for managing classes; @State is for structs", "isAnswer": false },
                { "optionText": "No significant difference; both can be used interchangeably", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is MVVM?",
            "possibleAnswers": [
                { "optionText": "A design pattern separating objects into Model, View, and ViewModel for testability and separation of concerns", "isAnswer": true },
                { "optionText": "A method for managing memory and resources within an iOS application", "isAnswer": false },
                { "optionText": "A framework for creating animations and handling real-time rendering", "isAnswer": false },
                { "optionText": "A data structure for organizing and managing lists and collections", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the Combine framework in iOS?",
            "possibleAnswers": [
                { "optionText": "A framework for handling asynchronous events and data streams using a declarative Swift API", "isAnswer": true },
                { "optionText": "A framework for managing images and media content within an iOS application", "isAnswer": false },
                { "optionText": "A tool for debugging and optimizing network requests in iOS applications", "isAnswer": false },
                { "optionText": "A UI framework for creating and managing animations", "isAnswer": false }
            ]
        },
        {
            "questionText": "How do you handle errors in Swift?",
            "possibleAnswers": [
                { "optionText": "Using do-catch blocks to catch and handle errors thrown by functions", "isAnswer": true },
                { "optionText": "Using try-catch blocks like in other programming languages", "isAnswer": false },
                { "optionText": "Using guard statements to catch and handle errors", "isAnswer": false },
                { "optionText": "Using if-else statements to check for errors", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between map, flatMap, and compactMap?",
            "possibleAnswers": [
                { "optionText": "map transforms elements; flatMap flattens collections; compactMap removes nils and unwraps optionals", "isAnswer": true },
                { "optionText": "flatMap and compactMap are for optionals; map is for non-optionals", "isAnswer": false },
                { "optionText": "map removes duplicates; flatMap and compactMap handle nested collections", "isAnswer": false },
                { "optionText": "No significant difference; all can be used interchangeably", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a tuple in Swift?",
            "possibleAnswers": [
                { "optionText": "A group of values of different types, grouped into a single compound value", "isAnswer": true },
                { "optionText": "A loop that iterates over a collection and performs operations", "isAnswer": false },
                { "optionText": "A data structure for storing key-value pairs, like a dictionary", "isAnswer": false },
                { "optionText": "A UIView subclass used for grouping and organizing UI elements", "isAnswer": false }
            ]
        }
    ]
}

