
{
    "name": "General 1",
    "questions": [
        {
            "questionText": "What is the purpose of the @IBOutlet keyword in Swift?",
            "possibleAnswers": [
                { "optionText": "To connect UI elements in Interface Builder to your code as variables", "isAnswer": true },
                { "optionText": "To connect UI elements to read-only properties", "isAnswer": false },
                { "optionText": "To define variables that automatically update UI elements", "isAnswer": false },
                { "optionText": "To link actions to UI elements in Interface Builder", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is ARC (Automatic Reference Counting) in iOS?",
            "possibleAnswers": [
                { "optionText": "A system that automatically manages memory by counting strong references", "isAnswer": true },
                { "optionText": "A technique requiring manual memory management by developers", "isAnswer": false },
                { "optionText": "A mechanism preventing memory leaks by deallocating unreferenced objects", "isAnswer": false },
                { "optionText": "A way to manage memory by tracking strong and weak references", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of a storyboard in iOS development?",
            "possibleAnswers": [
                { "optionText": "To design the app's UI layout and manage view transitions", "isAnswer": true },
                { "optionText": "To define data flow between view controllers", "isAnswer": false },
                { "optionText": "To manage the interaction between app logic and UI components", "isAnswer": false },
                { "optionText": "To create and manage UI elements programmatically", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between @objc and @objcMembers in Swift?",
            "possibleAnswers": [
                { "optionText": "@objc exposes a single method; @objcMembers exposes all class methods", "isAnswer": true },
                { "optionText": "@objc is for classes and structs; @objcMembers is for classes only", "isAnswer": false },
                { "optionText": "@objc makes a class Objective-C compatible; @objcMembers is for individual methods", "isAnswer": false },
                { "optionText": "@objc exposes instance methods; @objcMembers exposes class methods", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of a DispatchQueue in iOS?",
            "possibleAnswers": [
                { "optionText": "To manage task execution asynchronously or synchronously on different threads", "isAnswer": true },
                { "optionText": "To ensure all tasks run on the main thread", "isAnswer": false },
                { "optionText": "To execute tasks in sequence, ensuring thread safety", "isAnswer": false },
                { "optionText": "To manage memory allocation for background tasks", "isAnswer": false }
            ]
        },
        {
            "questionText": "What does the @Published property wrapper do in Swift?",
            "possibleAnswers": [
                { "optionText": "Notifies observers of changes, triggering UI updates in SwiftUI", "isAnswer": true },
                { "optionText": "Caches the property's value, preventing changes", "isAnswer": false },
                { "optionText": "Marks a property as optional, allowing nil values", "isAnswer": false },
                { "optionText": "Synchronizes the property across instances of the class", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the purpose of the @main attribute in Swift?",
            "possibleAnswers": [
                { "optionText": "Indicates the entry point of a Swift application", "isAnswer": true },
                { "optionText": "Marks the main thread for thread-safe operations in SwiftUI", "isAnswer": false },
                { "optionText": "Ensures a class or struct is initialized once", "isAnswer": false },
                { "optionText": "Defines the main view controller for UI interactions", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is Combine used for in iOS development?",
            "possibleAnswers": [
                { "optionText": "To handle asynchronous events and data streams using a declarative Swift API", "isAnswer": true },
                { "optionText": "To merge multiple data sources for UI updates", "isAnswer": false },
                { "optionText": "To combine multiple view controllers into a single interface", "isAnswer": false },
                { "optionText": "To manage Core Data relationships and updates", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between weak and unowned references in Swift?",
            "possibleAnswers": [
                { "optionText": "Weak references can become nil; unowned references cannot", "isAnswer": true },
                { "optionText": "Unowned references convert to weak if they can be nil", "isAnswer": false },
                { "optionText": "Weak references are used for value types; unowned for reference types", "isAnswer": false },
                { "optionText": "Weak references increase reference count; unowned do not", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the role of AppDelegate in an iOS application?",
            "possibleAnswers": [
                { "optionText": "To handle application lifecycle events and push notifications", "isAnswer": true },
                { "optionText": "To manage the app's memory and resources", "isAnswer": false },
                { "optionText": "To serve as the main entry point for creating views", "isAnswer": false },
                { "optionText": "To manage the navigation stack and view controller transitions", "isAnswer": false }
            ]
        }
    ]
}

