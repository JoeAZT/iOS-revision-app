
{
    "name": "General3",
      "questions": [
        {
          "questionText": "What is the difference between 'any' and 'some' in Swift?",
          "possibleAnswers": [
            { "optionText": "'any' represents a type-erased protocol, while 'some' specifies an opaque return type", "isAnswer": true },
            { "optionText": "'any' is used for inheritance, while 'some' is for composition", "isAnswer": false },
            { "optionText": "'any' allows for generics, while 'some' does not", "isAnswer": false },
            { "optionText": "'any' defines a function, while 'some' defines a variable", "isAnswer": false }
          ]
        },
        {
          "questionText": "What does 'sendable' mean in Swift?",
          "possibleAnswers": [
            { "optionText": "'Sendable' indicates that a type is safe to be passed between threads", "isAnswer": true },
            { "optionText": "'Sendable' allows functions to send data over the network", "isAnswer": false },
            { "optionText": "'Sendable' defines a protocol for asynchronous event handling", "isAnswer": false },
            { "optionText": "'Sendable' makes a type immutable by default", "isAnswer": false }
          ]
        },
        {
          "questionText": "Does a lazy property have access to other values in its class?",
          "possibleAnswers": [
            { "optionText": "Yes, a lazy property can access other properties and methods of its class", "isAnswer": true },
            { "optionText": "No, a lazy property is isolated and cannot access any other class members", "isAnswer": false },
            { "optionText": "Yes, but only if it is initialized within the class's initializer", "isAnswer": false },
            { "optionText": "No, lazy properties can only reference static values", "isAnswer": false }
          ]
        },
        {
          "questionText": "What is a keyPath in Swift and its function?",
          "possibleAnswers": [
            { "optionText": "A keyPath is a type-safe reference to a property of a type, used for dynamic property access", "isAnswer": true },
            { "optionText": "A keyPath is a mapping function used to filter collections", "isAnswer": false },
            { "optionText": "A keyPath is a shortcut for initializing types with default values", "isAnswer": false },
            { "optionText": "A keyPath is a Swift UI feature for defining navigation routes", "isAnswer": false }
          ]
        },
        {
            "questionText": "What is GCD (Grand Central Dispatch) used for in iOS?",
            "possibleAnswers": [
                { "optionText": "For managing tasks in a multi-threaded environment", "isAnswer": true },
                { "optionText": "For handling database queries across threads", "isAnswer": false },
                { "optionText": "For creating and managing user interfaces across threads", "isAnswer": false },
                { "optionText": "For handling image processing and compute-intensive tasks", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a completion handler?",
            "possibleAnswers": [
                { "optionText": "A closure called when an asynchronous task completes", "isAnswer": true },
                { "optionText": "A function called when a loop completes its execution", "isAnswer": false },
                { "optionText": "A closure that handles errors within a function", "isAnswer": false },
                { "optionText": "A tool to manage and synchronize multiple threads", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a closure in Swift?",
            "possibleAnswers": [
                { "optionText": "A self-contained block of code that can be passed around and used", "isAnswer": true },
                { "optionText": "A function without a name that is executed immediately", "isAnswer": false },
                { "optionText": "A method used for error handling in Swift applications", "isAnswer": false },
                { "optionText": "A special data structure for managing memory in Swift", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is a delegate in iOS development?",
            "possibleAnswers": [
                { "optionText": "A design pattern allowing communication between objects via a protocol", "isAnswer": true },
                { "optionText": "A class defining a blueprint of methods for another class", "isAnswer": false },
                { "optionText": "A tool for managing multithreading within an application", "isAnswer": false },
                { "optionText": "A UIView subclass handling user input and gestures", "isAnswer": false }
            ]
        },
        {
            "questionText": "What is the difference between weak and strong references?",
            "possibleAnswers": [
                { "optionText": "Strong references increase reference count; weak references do not", "isAnswer": true },
                { "optionText": "Weak references are faster and more memory-efficient", "isAnswer": false },
                { "optionText": "Strong references are used within closures only", "isAnswer": false },
                { "optionText": "No significant difference; both serve the same purpose", "isAnswer": false }
            ]
        },
        {
            "questionText": "add new question here from ",
            "possibleAnswers": [
                { "optionText": "Strong references increase reference count; weak references do not", "isAnswer": true },
                { "optionText": "Weak references are faster and more memory-efficient", "isAnswer": false },
                { "optionText": "Strong references are used within closures only", "isAnswer": false },
                { "optionText": "No significant difference; both serve the same purpose", "isAnswer": false }
            ]
        }
    ]
}

