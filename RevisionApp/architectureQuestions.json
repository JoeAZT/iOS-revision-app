[
    {
        "questionText": "What does the Repository pattern achieve?",
        "possibleAnswers": [
            { "optionText": "Decouples data access from the app logic.", "isAnswer": true },
            { "optionText": "Enhances network performance.", "isAnswer": false },
            { "optionText": "Manages UI state.", "isAnswer": false },
            { "optionText": "Handles authentication tasks.", "isAnswer": false }
        ]
    },
    {
        "questionText": "In VIPER, what does the Interactor do?",
        "possibleAnswers": [
            { "optionText": "Handles business logic and data processing.", "isAnswer": true },
            { "optionText": "Manages user interface updates.", "isAnswer": false },
            { "optionText": "Controls navigation flows.", "isAnswer": false },
            { "optionText": "Defines data models.", "isAnswer": false }
        ]
    },
    {
        "questionText": "What is the role of the Presenter in MVP?",
        "possibleAnswers": [
            { "optionText": "Acts as the mediator between Model and View.", "isAnswer": true },
            { "optionText": "Manages data storage and retrieval.", "isAnswer": false },
            { "optionText": "Renders the UI elements.", "isAnswer": false },
            { "optionText": "Handles network requests.", "isAnswer": false }
        ]
    },
    {
        "questionText": "What does the Clean Architecture emphasize?",
        "possibleAnswers": [
            { "optionText": "Layered separation of concerns.", "isAnswer": true },
            { "optionText": "High coupling between components.", "isAnswer": false },
            { "optionText": "Direct manipulation of UI elements.", "isAnswer": false },
            { "optionText": "Single responsibility for each class.", "isAnswer": false }
        ]
    },
    {
        "questionText": "How does MVVM handle data-binding?",
        "possibleAnswers": [
            { "optionText": "Through data binding between ViewModel and View.", "isAnswer": true },
            { "optionText": "By using direct property updates in the View.", "isAnswer": false },
            { "optionText": "Through static data assignments.", "isAnswer": false },
            { "optionText": "By manually passing data between components.", "isAnswer": false }
        ]
    },
    {
        "questionText": "Which architecture helps with scalable iOS projects?",
        "possibleAnswers": [
            { "optionText": "MVC", "isAnswer": false },
            { "optionText": "MVVM", "isAnswer": true },
            { "optionText": "Singleton", "isAnswer": false },
            { "optionText": "Observer", "isAnswer": false }
        ]
    },
    {
        "questionText": "In MVC, what does the Model represent?",
        "possibleAnswers": [
            { "optionText": "The data and business logic of the application.", "isAnswer": true },
            { "optionText": "The visual elements and user interface.", "isAnswer": false },
            { "optionText": "The communication between different app modules.", "isAnswer": false },
            { "optionText": "The applicationâ€™s navigation flow.", "isAnswer": false }
        ]
    },
    {
        "questionText": "What is an advantage of using the Coordinator pattern?",
        "possibleAnswers": [
            { "optionText": "Manages navigation and routing more efficiently.", "isAnswer": true },
            { "optionText": "Handles all network communications.", "isAnswer": false },
            { "optionText": "Optimizes data storage.", "isAnswer": false },
            { "optionText": "Improves UI rendering performance.", "isAnswer": false }
        ]
    },
    {
        "questionText": "What does VIPER stand for?",
        "possibleAnswers": [
            { "optionText": "View, Interactor, Presenter, Entity, Router.", "isAnswer": true },
            { "optionText": "View, Interface, Presenter, Entity, Router.", "isAnswer": false },
            { "optionText": "View, Input, Presenter, Entity, Router.", "isAnswer": false },
            { "optionText": "View, Interceptor, Presenter, Entity, Responder.", "isAnswer": false }
        ]
    },
    {
        "questionText": "What is an 'anti-pattern'?",
        "possibleAnswers": [
            { "optionText": "An ineffective solution that creates more problems.", "isAnswer": true },
            { "optionText": "A design pattern that is widely accepted.", "isAnswer": false },
            { "optionText": "A new programming feature or tool.", "isAnswer": false },
            { "optionText": "A type of design documentation.", "isAnswer": false }
        ]
    }
]

